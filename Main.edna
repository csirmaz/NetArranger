/*
This file is part of NetArranger
<https://github.com/csirmaz/NetArranger>

Copyright (c) 2014 Elod Csirmaz

The MIT License (MIT)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

This file uses EdnaScript. Please see
<https://github.com/csirmaz/EdnaScript>
*/

NetArranger = {};

#class NetArranger.Main

   #constructor(data, options)
      /*
         Incoming data has the following format:
         {
            <LABEL> : { html:<HTML>, css:<CSS_CLASS>, c:[<LIST OF LABELS>] },
            ...
         }
         The keys 'css' and 'c' are optional.

         Options are optional.

         (!) Create this object after the board DOM element is ready.
      */
      // Default options
      this._options = {
         board:'#board',
         boardsize:[500, 500],
         zoom: 5,
         arranger_force: -.01,
         attractor_force: .008,
         init_heat: 10,
         min_heat: .001,
         heat_reduction_time: 1000
      };

      var me = this;
      if(options){ $.extend(this._options, options); }

      this._boardsize = new NetArranger.Point(this._options.boardsize[0], this._options.boardsize[1]);
      this._boardoffset = this._boardsize.pclone_div(2);
      this._options.shakerad = Math.min(this._options.boardsize[0], this._options.boardsize[1]) / this._options.zoom;

      this._board = $(this._options.board).css({ width: this._boardsize._x+'px', height: this._boardsize._y+'px' });
      this._points = []; // list of WorldPoint objects
      this._points_labelled = {}; // Pointing from label to WorldPoint objects
      this._paused = false;
      this._heat = this._options.init_heat;
      this._draggednode = false; // false or [WorldPoint, offsetX, offsetY]

      // Construct objects
      for(var k in data){
         if(data.hasOwnProperty(k)){
            this._points_labelled[k] = new NetArranger.WorldPoint({
               main: this,
               html: data[k].html,
               css: data[k].css,
               x: (Math.random()-.5)*this._options.shakerad,
               y: (Math.random()-.5)*this._options.shakerad
            });
            this._points.push(this._points_labelled[k]);
         }
      }
      this._numpoints = this._points.length;

      // Add connections
      for(var k in data){
         if(data.hasOwnProperty(k) && data[k].c){
            data[k].c.forEach(function(e){
               if( typeof(this._points_labelled[e]) == 'undefined' ){
                  try{ console.log('NetArranger: unknown reference', e); }catch(e){}
               }
               else{
                  this._points_labelled[k].add_connection( this._points_labelled[e] );
               }
            }, this);
         }
      }

      // Mouse interactions
      this._board
      .mousemove(function(e){
         if(me._draggednode === false){ return; }
         var o = me._draggednode[0];
         o._x = me._draggednode[1] + e.pageX / me._options.zoom;
         o._y = me._draggednode[2] + e.pageY / me._options.zoom;
         o.redraw();
         me.resetheat();
      })
      .mouseup(function(e){
         me._draggednode = false;
      });


      // Start
      $(function(){
         setInterval(function(){
            if(me._paused){ return; }
            me.step();
         }, 10);

         // Reduce the heat as time passes
         setInterval(function(){
            if(me._paused){ return; }
            me._heat *= .9;
         }, me._options.heat_reduction_time);
      });

   #-constructor

   #method void step()
      var i, j, davg = 0;
      for(i=0; i<this._numpoints; i++){
         this._points[i].add_arranger_attractor();
      }

      for(i=0; i<this._numpoints; i++){
         for(j=i+1; j<this._numpoints; j++){
            this._points[i].add_repulsion_pair( this._points[j] );
         }
      }

      for(i=0; i<this._numpoints; i++){
         davg += this._points[i].apply_replacement(this._heat);
      }

      // Reduce the heat and stop as the nodes stop
      davg /= this._numpoints;
      if(davg < this._heat / 400){
         this._heat *= .98;
         if(this._heat < this._options.min_heat ){
            this._paused = true;
            try{
               console.log('NetArranger: Done');
            }catch(e){}
         }
      }

      for(i=0; i<this._numpoints; i++){
         this._points[i].redraw();
      }
   #-method


   // Reset the heat to its maximum value
   #method this resetheat()
      this._heat = this._options.init_heat;
      this._paused = false;
      return this;
   #-method

   #method this redraw()
      for(i=0; i<this._numpoints; i++){
         this._points[i].redraw();
      }
      return this;
   #-method

   // Call zoom(false) to zoom out, and zoom(true) to zoom in
   #method this zoom(bool zoomin)
      var displaycenter = this._boardsize.pclone_div(2);
      this._boardoffset.sub(displaycenter).div(this._options.zoom);
      this._options.zoom *= (zoomin ? 1.5 : 1/1.5);
      this._boardoffset.mult(this._options.zoom).add(displaycenter);
      this.redraw();
      return this;
   #-method

   #method this scroll(bool horizontally, bool plusward)
      var prop = (horizontally ? '_x' : '_y');
      this._boardoffset[prop] += (plusward ? 1 : -1) * this._boardsize[prop] / 5;
      this.redraw();
      return this;
   #-method

#-class
